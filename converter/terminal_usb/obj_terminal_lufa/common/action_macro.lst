   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB10:
  15               		.file 1 "/users/hunter/downloads/tmk_core/common/action_macro.c"
   1:/users/hunter/downloads/tmk_core/common/action_macro.c **** /*
   2:/users/hunter/downloads/tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
   4:/users/hunter/downloads/tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:/users/hunter/downloads/tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:/users/hunter/downloads/tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:/users/hunter/downloads/tmk_core/common/action_macro.c **** (at your option) any later version.
   8:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
   9:/users/hunter/downloads/tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:/users/hunter/downloads/tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/users/hunter/downloads/tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/users/hunter/downloads/tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  14:/users/hunter/downloads/tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:/users/hunter/downloads/tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/users/hunter/downloads/tmk_core/common/action_macro.c **** */
  17:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "action.h"
  18:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "action_util.h"
  19:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "wait.h"
  21:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  22:/users/hunter/downloads/tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "debug.h"
  24:/users/hunter/downloads/tmk_core/common/action_macro.c **** #else
  25:/users/hunter/downloads/tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:/users/hunter/downloads/tmk_core/common/action_macro.c **** #endif
  27:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  28:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  29:/users/hunter/downloads/tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  31:/users/hunter/downloads/tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:/users/hunter/downloads/tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:/users/hunter/downloads/tmk_core/common/action_macro.c **** {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 DF92      		push r13
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 13, -2
  23 0002 EF92      		push r14
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 14, -3
  27 0004 FF92      		push r15
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 15, -4
  31 0006 0F93      		push r16
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 16, -5
  35 0008 1F93      		push r17
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 17, -6
  39 000a CF93      		push r28
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 28, -7
  43 000c DF93      		push r29
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 29, -8
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 7 */
  50               	.L__stack_usage = 7
  51 000e 8C01      		movw r16,r24
  52               	.LVL1:
  34:/users/hunter/downloads/tmk_core/common/action_macro.c ****     macro_t macro = END;
  35:/users/hunter/downloads/tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  36:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  37:/users/hunter/downloads/tmk_core/common/action_macro.c ****     uint8_t mod_storage = 0;
  38:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  39:/users/hunter/downloads/tmk_core/common/action_macro.c ****     if (!macro_p) return;
  53               		.loc 1 39 0
  54 0010 892B      		or r24,r25
  55 0012 01F0      		breq .L1
  37:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  56               		.loc 1 37 0
  57 0014 E12C      		mov r14,__zero_reg__
  35:/users/hunter/downloads/tmk_core/common/action_macro.c **** 
  58               		.loc 1 35 0
  59 0016 F12C      		mov r15,__zero_reg__
  40:/users/hunter/downloads/tmk_core/common/action_macro.c ****     while (true) {
  41:/users/hunter/downloads/tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  60               		.loc 1 46 0
  61 0018 DD24      		clr r13
  62 001a D394      		inc r13
  63               	.LVL2:
  64               	.L21:
  65               	.LBB13:
  41:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  66               		.loc 1 41 0
  67 001c E801      		movw r28,r16
  68 001e 2196      		adiw r28,1
  69               	.LVL3:
  70 0020 F801      		movw r30,r16
  71               	/* #APP */
  72               	 ;  41 "/users/hunter/downloads/tmk_core/common/action_macro.c" 1
  73 0022 8491      		lpm r24, Z
  74               		
  75               	 ;  0 "" 2
  76               	.LVL4:
  77               	/* #NOAPP */
  78               	.LBE13:
  79 0024 8537      		cpi r24,lo8(117)
  80 0026 01F4      		brne .+2
  81 0028 00C0      		rjmp .L3
  82 002a 00F4      		brsh .L4
  83 002c 8437      		cpi r24,lo8(116)
  84 002e 00F0      		brlo .+2
  85 0030 00C0      		rjmp .L5
  86 0032 8430      		cpi r24,lo8(4)
  87 0034 00F0      		brlo .+2
  88 0036 00C0      		rjmp .L6
  89 0038 8130      		cpi r24,lo8(1)
  90 003a 01F0      		breq .L7
  91 003c 8230      		cpi r24,lo8(2)
  92 003e 01F4      		brne .+2
  93 0040 00C0      		rjmp .L8
  94               	.LVL5:
  95               	.L1:
  96               	/* epilogue start */
  47:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 } else {
  49:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     register_code(macro);
  50:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 }
  51:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  52:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case KEY_UP:
  53:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
  57:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 } else {
  59:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 }
  61:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  62:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case WAIT:
  63:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  66:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  67:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case INTERVAL:
  68:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  69:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  70:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  71:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case MOD_STORE:
  72:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 mod_storage = get_mods();
  73:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  74:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case MOD_RESTORE:
  75:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 set_mods(mod_storage);
  76:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 send_keyboard_report();
  77:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  78:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case MOD_CLEAR:
  79:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 clear_mods();
  80:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 send_keyboard_report();
  81:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  82:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  83:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  84:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 register_code(macro);
  85:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  86:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  87:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  88:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  89:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
  90:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case END:
  91:/users/hunter/downloads/tmk_core/common/action_macro.c ****             default:
  92:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 return;
  93:/users/hunter/downloads/tmk_core/common/action_macro.c ****         }
  94:/users/hunter/downloads/tmk_core/common/action_macro.c ****         // interval
  95:/users/hunter/downloads/tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
  96:/users/hunter/downloads/tmk_core/common/action_macro.c ****     }
  97:/users/hunter/downloads/tmk_core/common/action_macro.c **** }
  97               		.loc 1 97 0
  98 0042 DF91      		pop r29
  99 0044 CF91      		pop r28
 100 0046 1F91      		pop r17
 101 0048 0F91      		pop r16
 102 004a FF90      		pop r15
 103 004c EF90      		pop r14
 104 004e DF90      		pop r13
 105 0050 0895      		ret
 106               	.LVL6:
 107               	.L4:
  41:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case KEY_DOWN:
 108               		.loc 1 41 0
 109 0052 8837      		cpi r24,lo8(120)
 110 0054 01F4      		brne .+2
 111 0056 00C0      		rjmp .L9
 112 0058 00F4      		brsh .L10
 113 005a 8637      		cpi r24,lo8(118)
 114 005c 01F4      		brne .+2
 115 005e 00C0      		rjmp .L11
 116 0060 8737      		cpi r24,lo8(119)
 117 0062 01F4      		brne .L1
  75:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 118               		.loc 1 75 0
 119 0064 8E2D      		mov r24,r14
 120               	.LVL7:
 121 0066 0E94 0000 		call set_mods
 122               	.LVL8:
 123               	.L28:
  80:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
 124               		.loc 1 80 0
 125 006a 0E94 0000 		call send_keyboard_report
 126               	.LVL9:
  81:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 127               		.loc 1 81 0
 128 006e 00C0      		rjmp .L15
 129               	.LVL10:
 130               	.L10:
  41:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case KEY_DOWN:
 131               		.loc 1 41 0
 132 0070 9CE7      		ldi r25,lo8(124)
 133 0072 980F      		add r25,r24
 134 0074 9037      		cpi r25,lo8(112)
 135 0076 00F4      		brsh .L1
  88:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
 136               		.loc 1 88 0
 137 0078 8F77      		andi r24,lo8(127)
 138               	.LVL11:
 139 007a 0E94 0000 		call unregister_code
 140               	.LVL12:
  89:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case END:
 141               		.loc 1 89 0
 142 007e 00C0      		rjmp .L15
 143               	.LVL13:
 144               	.L7:
 145               	.LBB14:
  43:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 146               		.loc 1 43 0
 147 0080 0E5F      		subi r16,-2
 148 0082 1F4F      		sbci r17,-1
 149               	.LVL14:
 150 0084 FE01      		movw r30,r28
 151               	.LVL15:
 152               	/* #APP */
 153               	 ;  43 "/users/hunter/downloads/tmk_core/common/action_macro.c" 1
 154 0086 8491      		lpm r24, Z
 155               		
 156               	 ;  0 "" 2
 157               	.LVL16:
 158               	/* #NOAPP */
 159               	.LBE14:
  45:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 160               		.loc 1 45 0
 161 0088 90E2      		ldi r25,lo8(32)
 162 008a 980F      		add r25,r24
 163 008c 9830      		cpi r25,lo8(8)
 164 008e 00F4      		brsh .L14
  46:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 165               		.loc 1 46 0
 166 0090 8770      		andi r24,lo8(7)
 167               	.LVL17:
 168 0092 FD2D      		mov r31,r13
 169 0094 00C0      		rjmp 2f
 170               		1:
 171 0096 FF0F      		lsl r31
 172               		2:
 173 0098 8A95      		dec r24
 174 009a 02F4      		brpl 1b
 175 009c 8F2F      		mov r24,r31
 176 009e 0E94 0000 		call add_weak_mods
 177               	.LVL18:
 178               	.L26:
  57:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 } else {
 179               		.loc 1 57 0
 180 00a2 0E94 0000 		call send_keyboard_report
 181               	.LVL19:
 182 00a6 00C0      		rjmp .L27
 183               	.LVL20:
 184               	.L14:
  49:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 }
 185               		.loc 1 49 0
 186 00a8 0E94 0000 		call register_code
 187               	.LVL21:
 188               	.L27:
 189               	.LBB15:
  53:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 190               		.loc 1 53 0
 191 00ac E801      		movw r28,r16
 192               	.LVL22:
 193               	.L15:
 194               	.LBE15:
 195               	.LBB16:
  95:/users/hunter/downloads/tmk_core/common/action_macro.c ****     }
 196               		.loc 1 95 0
 197 00ae 8F2D      		mov r24,r15
 198               	.LVL23:
 199               	.L19:
  95:/users/hunter/downloads/tmk_core/common/action_macro.c ****     }
 200               		.loc 1 95 0 is_stmt 0 discriminator 1
 201               	.LVL24:
 202 00b0 8150      		subi r24,1
 203 00b2 00F0      		brcs .+2
 204 00b4 00C0      		rjmp .L20
 205 00b6 8E01      		movw r16,r28
 206 00b8 00C0      		rjmp .L21
 207               	.LVL25:
 208               	.L8:
 209               	.LBE16:
 210               	.LBB19:
  53:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 211               		.loc 1 53 0 is_stmt 1
 212 00ba 0E5F      		subi r16,-2
 213 00bc 1F4F      		sbci r17,-1
 214               	.LVL26:
 215 00be FE01      		movw r30,r28
 216               	.LVL27:
 217               	/* #APP */
 218               	 ;  53 "/users/hunter/downloads/tmk_core/common/action_macro.c" 1
 219 00c0 8491      		lpm r24, Z
 220               		
 221               	 ;  0 "" 2
 222               	.LVL28:
 223               	/* #NOAPP */
 224               	.LBE19:
  55:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 225               		.loc 1 55 0
 226 00c2 90E2      		ldi r25,lo8(32)
 227 00c4 980F      		add r25,r24
 228 00c6 9830      		cpi r25,lo8(8)
 229 00c8 00F4      		brsh .L16
  56:/users/hunter/downloads/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 230               		.loc 1 56 0
 231 00ca 8770      		andi r24,lo8(7)
 232               	.LVL29:
 233 00cc FD2D      		mov r31,r13
 234 00ce 00C0      		rjmp 2f
 235               		1:
 236 00d0 FF0F      		lsl r31
 237               		2:
 238 00d2 8A95      		dec r24
 239 00d4 02F4      		brpl 1b
 240 00d6 8F2F      		mov r24,r31
 241 00d8 0E94 0000 		call del_weak_mods
 242               	.LVL30:
 243 00dc 00C0      		rjmp .L26
 244               	.LVL31:
 245               	.L16:
  59:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 }
 246               		.loc 1 59 0
 247 00de 0E94 0000 		call unregister_code
 248               	.LVL32:
 249 00e2 00C0      		rjmp .L27
 250               	.LVL33:
 251               	.L5:
 252               	.LBB20:
  63:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 253               		.loc 1 63 0
 254 00e4 0E5F      		subi r16,-2
 255 00e6 1F4F      		sbci r17,-1
 256               	.LVL34:
 257 00e8 FE01      		movw r30,r28
 258               	.LVL35:
 259               	/* #APP */
 260               	 ;  63 "/users/hunter/downloads/tmk_core/common/action_macro.c" 1
 261 00ea C491      		lpm r28, Z
 262               		
 263               	 ;  0 "" 2
 264               	.LVL36:
 265               	/* #NOAPP */
 266               	.L17:
 267               	.LBE20:
 268               	.LBB21:
  65:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
 269               		.loc 1 65 0 discriminator 1
 270               	.LVL37:
 271 00ec C150      		subi r28,1
 272 00ee 00F0      		brcs .L27
 273               	.LBB22:
 274               	.LBB23:
 275               		.file 2 "/opt/local/avr/include/util/delay.h"
   1:/opt/local/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/opt/local/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/opt/local/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/opt/local/avr/include/util/delay.h ****    All rights reserved.
   5:/opt/local/avr/include/util/delay.h **** 
   6:/opt/local/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/opt/local/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/opt/local/avr/include/util/delay.h **** 
   9:/opt/local/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/opt/local/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/opt/local/avr/include/util/delay.h **** 
  12:/opt/local/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/opt/local/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/opt/local/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/opt/local/avr/include/util/delay.h ****      distribution.
  16:/opt/local/avr/include/util/delay.h **** 
  17:/opt/local/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/opt/local/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/opt/local/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/opt/local/avr/include/util/delay.h **** 
  21:/opt/local/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/opt/local/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/opt/local/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/opt/local/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/opt/local/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/opt/local/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/opt/local/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/opt/local/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/opt/local/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/opt/local/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/opt/local/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/opt/local/avr/include/util/delay.h **** 
  33:/opt/local/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/opt/local/avr/include/util/delay.h **** 
  35:/opt/local/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/opt/local/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/opt/local/avr/include/util/delay.h **** 
  38:/opt/local/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/opt/local/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/opt/local/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/opt/local/avr/include/util/delay.h **** #  endif
  42:/opt/local/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/opt/local/avr/include/util/delay.h **** 
  44:/opt/local/avr/include/util/delay.h **** #include <inttypes.h>
  45:/opt/local/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/opt/local/avr/include/util/delay.h **** #include <math.h>
  47:/opt/local/avr/include/util/delay.h **** 
  48:/opt/local/avr/include/util/delay.h **** /** \file */
  49:/opt/local/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/opt/local/avr/include/util/delay.h ****     \code
  51:/opt/local/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/opt/local/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/opt/local/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/opt/local/avr/include/util/delay.h ****     \endcode
  55:/opt/local/avr/include/util/delay.h **** 
  56:/opt/local/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/opt/local/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/opt/local/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/opt/local/avr/include/util/delay.h ****     used.
  60:/opt/local/avr/include/util/delay.h **** 
  61:/opt/local/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/opt/local/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/opt/local/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/opt/local/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/opt/local/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/opt/local/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/opt/local/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/opt/local/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/opt/local/avr/include/util/delay.h **** 
  70:/opt/local/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/opt/local/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/opt/local/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/opt/local/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/opt/local/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/opt/local/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/opt/local/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/opt/local/avr/include/util/delay.h ****     routines linked into the application.
  78:/opt/local/avr/include/util/delay.h **** 
  79:/opt/local/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/opt/local/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/opt/local/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/opt/local/avr/include/util/delay.h **** 
  83:/opt/local/avr/include/util/delay.h **** */
  84:/opt/local/avr/include/util/delay.h **** 
  85:/opt/local/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/opt/local/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/opt/local/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/opt/local/avr/include/util/delay.h **** #endif
  89:/opt/local/avr/include/util/delay.h **** 
  90:/opt/local/avr/include/util/delay.h **** #ifndef F_CPU
  91:/opt/local/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/opt/local/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/opt/local/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/opt/local/avr/include/util/delay.h ****     \def F_CPU
  95:/opt/local/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/opt/local/avr/include/util/delay.h **** 
  97:/opt/local/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/opt/local/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/opt/local/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/opt/local/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/opt/local/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/opt/local/avr/include/util/delay.h **** 
 103:/opt/local/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/opt/local/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/opt/local/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/opt/local/avr/include/util/delay.h ****     integer value.
 107:/opt/local/avr/include/util/delay.h ****  */
 108:/opt/local/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/opt/local/avr/include/util/delay.h **** #endif
 110:/opt/local/avr/include/util/delay.h **** 
 111:/opt/local/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/opt/local/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/opt/local/avr/include/util/delay.h **** #endif
 114:/opt/local/avr/include/util/delay.h **** 
 115:/opt/local/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/opt/local/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/opt/local/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/opt/local/avr/include/util/delay.h **** #  include <math.h>
 119:/opt/local/avr/include/util/delay.h **** #endif
 120:/opt/local/avr/include/util/delay.h **** 
 121:/opt/local/avr/include/util/delay.h **** /**
 122:/opt/local/avr/include/util/delay.h ****    \ingroup util_delay
 123:/opt/local/avr/include/util/delay.h **** 
 124:/opt/local/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/opt/local/avr/include/util/delay.h **** 
 126:/opt/local/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/opt/local/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/opt/local/avr/include/util/delay.h **** 
 129:/opt/local/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/opt/local/avr/include/util/delay.h **** 
 131:/opt/local/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/opt/local/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/opt/local/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/opt/local/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/opt/local/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/opt/local/avr/include/util/delay.h **** 
 137:/opt/local/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/opt/local/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/opt/local/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/opt/local/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/opt/local/avr/include/util/delay.h **** 
 142:/opt/local/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/opt/local/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/opt/local/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/opt/local/avr/include/util/delay.h ****    microseconds of delay.
 146:/opt/local/avr/include/util/delay.h **** 
 147:/opt/local/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/opt/local/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/opt/local/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/opt/local/avr/include/util/delay.h ****    respectively.
 151:/opt/local/avr/include/util/delay.h **** 
 152:/opt/local/avr/include/util/delay.h ****    \note
 153:/opt/local/avr/include/util/delay.h **** 
 154:/opt/local/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/opt/local/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/opt/local/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/opt/local/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/opt/local/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/opt/local/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/opt/local/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/opt/local/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/opt/local/avr/include/util/delay.h ****    not available to the compiler then.
 163:/opt/local/avr/include/util/delay.h **** 
 164:/opt/local/avr/include/util/delay.h ****  */
 165:/opt/local/avr/include/util/delay.h **** void
 166:/opt/local/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/opt/local/avr/include/util/delay.h **** {
 168:/opt/local/avr/include/util/delay.h **** 	double __tmp ;
 169:/opt/local/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/opt/local/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/opt/local/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/opt/local/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/opt/local/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/opt/local/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/opt/local/avr/include/util/delay.h **** 
 176:/opt/local/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/opt/local/avr/include/util/delay.h **** 
 179:/opt/local/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/opt/local/avr/include/util/delay.h **** 
 182:/opt/local/avr/include/util/delay.h **** 	#else
 183:/opt/local/avr/include/util/delay.h **** 		//round up by default
 184:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/opt/local/avr/include/util/delay.h **** 	#endif
 186:/opt/local/avr/include/util/delay.h **** 
 187:/opt/local/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 276               		.loc 2 187 0
 277 00f0 8FE9      		ldi r24,lo8(3999)
 278 00f2 9FE0      		ldi r25,hi8(3999)
 279 00f4 0197      	1:	sbiw r24,1
 280 00f6 01F4      		brne 1b
 281 00f8 00C0      		rjmp .
 282 00fa 0000      		nop
 283 00fc 00C0      		rjmp .L17
 284               	.LVL38:
 285               	.L3:
 286               	.LBE23:
 287               	.LBE22:
 288               	.LBE21:
 289               	.LBB24:
  68:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 290               		.loc 1 68 0
 291 00fe 0E5F      		subi r16,-2
 292 0100 1F4F      		sbci r17,-1
 293               	.LVL39:
 294 0102 FE01      		movw r30,r28
 295               	.LVL40:
 296               	/* #APP */
 297               	 ;  68 "/users/hunter/downloads/tmk_core/common/action_macro.c" 1
 298 0104 F490      		lpm r15, Z
 299               		
 300               	 ;  0 "" 2
 301               	.LVL41:
 302               	/* #NOAPP */
 303 0106 00C0      		rjmp .L27
 304               	.LVL42:
 305               	.L11:
 306               	.LBE24:
  72:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
 307               		.loc 1 72 0
 308 0108 0E94 0000 		call get_mods
 309               	.LVL43:
 310 010c E82E      		mov r14,r24
 311               	.LVL44:
  73:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case MOD_RESTORE:
 312               		.loc 1 73 0
 313 010e 00C0      		rjmp .L15
 314               	.LVL45:
 315               	.L9:
  79:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 316               		.loc 1 79 0
 317 0110 0E94 0000 		call clear_mods
 318               	.LVL46:
 319 0114 00C0      		rjmp .L28
 320               	.LVL47:
 321               	.L6:
  84:/users/hunter/downloads/tmk_core/common/action_macro.c ****                 break;
 322               		.loc 1 84 0
 323 0116 0E94 0000 		call register_code
 324               	.LVL48:
  85:/users/hunter/downloads/tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 325               		.loc 1 85 0
 326 011a 00C0      		rjmp .L15
 327               	.LVL49:
 328               	.L20:
 329               	.LBB25:
 330               	.LBB17:
 331               	.LBB18:
 332               		.loc 2 187 0
 333 011c EFE9      		ldi r30,lo8(3999)
 334 011e FFE0      		ldi r31,hi8(3999)
 335 0120 3197      	1:	sbiw r30,1
 336 0122 01F4      		brne 1b
 337 0124 00C0      		rjmp .
 338 0126 0000      		nop
 339 0128 00C0      		rjmp .L19
 340               	.LBE18:
 341               	.LBE17:
 342               	.LBE25:
 343               		.cfi_endproc
 344               	.LFE10:
 346               		.text
 347               	.Letext0:
 348               		.file 3 "/opt/local/avr/include/stdint.h"
 349               		.file 4 "/users/hunter/downloads/tmk_core/common/action_macro.h"
 350               		.file 5 "/users/hunter/downloads/tmk_core/common/keycode.h"
 351               		.file 6 "/users/hunter/downloads/tmk_core/common/report.h"
 352               		.file 7 "/users/hunter/downloads/tmk_core/common/action_util.h"
 353               		.file 8 "/users/hunter/downloads/tmk_core/common/avr/xprintf.h"
 354               		.file 9 "/users/hunter/downloads/tmk_core/common/debug.h"
 355               		.file 10 "/users/hunter/downloads/tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:4      *ABS*:000000000000003f __SREG__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//cc8ehXIN.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
set_mods
send_keyboard_report
unregister_code
add_weak_mods
register_code
del_weak_mods
get_mods
clear_mods
