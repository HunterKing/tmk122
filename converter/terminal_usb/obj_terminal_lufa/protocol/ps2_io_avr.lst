   1               		.file	"ps2_io_avr.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.clock_init,"ax",@progbits
  11               	.global	clock_init
  13               	clock_init:
  14               	.LFB6:
  15               		.file 1 "/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c"
   1:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #include <stdbool.h>
   2:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #include <avr/io.h>
   3:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #include <util/delay.h>
   4:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
   5:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** /* Check port settings for clock and data line */
   6:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #if !(defined(PS2_CLOCK_PORT) && \
   7:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_PIN) && \
   8:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_DDR) && \
   9:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_BIT))
  10:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #   error "PS/2 clock port setting is required in config.h"
  11:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #endif
  12:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  13:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #if !(defined(PS2_DATA_PORT) && \
  14:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_PIN) && \
  15:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_DDR) && \
  16:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_BIT))
  17:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #   error "PS/2 data port setting is required in config.h"
  18:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** #endif
  19:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  20:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  21:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** /*
  22:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****  * Clock
  23:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****  */
  24:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void clock_init(void)
  25:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
  16               		.loc 1 25 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	/* epilogue start */
  26:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
  23               		.loc 1 26 0
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE6:
  28               		.section	.text.clock_lo,"ax",@progbits
  29               	.global	clock_lo
  31               	clock_lo:
  32               	.LFB7:
  27:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  28:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void clock_lo(void)
  29:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
  33               		.loc 1 29 0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  30:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT &= ~(1<<PS2_CLOCK_BIT);
  39               		.loc 1 30 0
  40 0000 5998      		cbi 0xb,1
  31:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  |=  (1<<PS2_CLOCK_BIT);
  41               		.loc 1 31 0
  42 0002 519A      		sbi 0xa,1
  43               	/* epilogue start */
  32:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
  44               		.loc 1 32 0
  45 0004 0895      		ret
  46               		.cfi_endproc
  47               	.LFE7:
  49               		.section	.text.clock_hi,"ax",@progbits
  50               	.global	clock_hi
  52               	clock_hi:
  53               	.LFB8:
  33:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  34:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void clock_hi(void)
  35:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
  54               		.loc 1 35 0
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  36:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     /* input with pull up */
  37:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
  60               		.loc 1 37 0
  61 0000 5198      		cbi 0xa,1
  38:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
  62               		.loc 1 38 0
  63 0002 599A      		sbi 0xb,1
  64               	/* epilogue start */
  39:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
  65               		.loc 1 39 0
  66 0004 0895      		ret
  67               		.cfi_endproc
  68               	.LFE8:
  70               		.section	.text.clock_in,"ax",@progbits
  71               	.global	clock_in
  73               	clock_in:
  74               	.LFB9:
  40:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  41:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** bool clock_in(void)
  42:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
  75               		.loc 1 42 0
  76               		.cfi_startproc
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  43:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
  81               		.loc 1 43 0
  82 0000 5198      		cbi 0xa,1
  44:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
  83               		.loc 1 44 0
  84 0002 599A      		sbi 0xb,1
  85               	.LVL0:
  86               	.LBB6:
  87               	.LBB7:
  88               		.file 2 "/opt/local/avr/include/util/delay.h"
   1:/opt/local/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/opt/local/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/opt/local/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/opt/local/avr/include/util/delay.h ****    All rights reserved.
   5:/opt/local/avr/include/util/delay.h **** 
   6:/opt/local/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/opt/local/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/opt/local/avr/include/util/delay.h **** 
   9:/opt/local/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/opt/local/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/opt/local/avr/include/util/delay.h **** 
  12:/opt/local/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/opt/local/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/opt/local/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/opt/local/avr/include/util/delay.h ****      distribution.
  16:/opt/local/avr/include/util/delay.h **** 
  17:/opt/local/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/opt/local/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/opt/local/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/opt/local/avr/include/util/delay.h **** 
  21:/opt/local/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/opt/local/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/opt/local/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/opt/local/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/opt/local/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/opt/local/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/opt/local/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/opt/local/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/opt/local/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/opt/local/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/opt/local/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/opt/local/avr/include/util/delay.h **** 
  33:/opt/local/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/opt/local/avr/include/util/delay.h **** 
  35:/opt/local/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/opt/local/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/opt/local/avr/include/util/delay.h **** 
  38:/opt/local/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/opt/local/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/opt/local/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/opt/local/avr/include/util/delay.h **** #  endif
  42:/opt/local/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/opt/local/avr/include/util/delay.h **** 
  44:/opt/local/avr/include/util/delay.h **** #include <inttypes.h>
  45:/opt/local/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/opt/local/avr/include/util/delay.h **** #include <math.h>
  47:/opt/local/avr/include/util/delay.h **** 
  48:/opt/local/avr/include/util/delay.h **** /** \file */
  49:/opt/local/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/opt/local/avr/include/util/delay.h ****     \code
  51:/opt/local/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/opt/local/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/opt/local/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/opt/local/avr/include/util/delay.h ****     \endcode
  55:/opt/local/avr/include/util/delay.h **** 
  56:/opt/local/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/opt/local/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/opt/local/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/opt/local/avr/include/util/delay.h ****     used.
  60:/opt/local/avr/include/util/delay.h **** 
  61:/opt/local/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/opt/local/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/opt/local/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/opt/local/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/opt/local/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/opt/local/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/opt/local/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/opt/local/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/opt/local/avr/include/util/delay.h **** 
  70:/opt/local/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/opt/local/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/opt/local/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/opt/local/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/opt/local/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/opt/local/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/opt/local/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/opt/local/avr/include/util/delay.h ****     routines linked into the application.
  78:/opt/local/avr/include/util/delay.h **** 
  79:/opt/local/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/opt/local/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/opt/local/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/opt/local/avr/include/util/delay.h **** 
  83:/opt/local/avr/include/util/delay.h **** */
  84:/opt/local/avr/include/util/delay.h **** 
  85:/opt/local/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/opt/local/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/opt/local/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/opt/local/avr/include/util/delay.h **** #endif
  89:/opt/local/avr/include/util/delay.h **** 
  90:/opt/local/avr/include/util/delay.h **** #ifndef F_CPU
  91:/opt/local/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/opt/local/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/opt/local/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/opt/local/avr/include/util/delay.h ****     \def F_CPU
  95:/opt/local/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/opt/local/avr/include/util/delay.h **** 
  97:/opt/local/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/opt/local/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/opt/local/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/opt/local/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/opt/local/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/opt/local/avr/include/util/delay.h **** 
 103:/opt/local/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/opt/local/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/opt/local/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/opt/local/avr/include/util/delay.h ****     integer value.
 107:/opt/local/avr/include/util/delay.h ****  */
 108:/opt/local/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/opt/local/avr/include/util/delay.h **** #endif
 110:/opt/local/avr/include/util/delay.h **** 
 111:/opt/local/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/opt/local/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/opt/local/avr/include/util/delay.h **** #endif
 114:/opt/local/avr/include/util/delay.h **** 
 115:/opt/local/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/opt/local/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/opt/local/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/opt/local/avr/include/util/delay.h **** #  include <math.h>
 119:/opt/local/avr/include/util/delay.h **** #endif
 120:/opt/local/avr/include/util/delay.h **** 
 121:/opt/local/avr/include/util/delay.h **** /**
 122:/opt/local/avr/include/util/delay.h ****    \ingroup util_delay
 123:/opt/local/avr/include/util/delay.h **** 
 124:/opt/local/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/opt/local/avr/include/util/delay.h **** 
 126:/opt/local/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/opt/local/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/opt/local/avr/include/util/delay.h **** 
 129:/opt/local/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/opt/local/avr/include/util/delay.h **** 
 131:/opt/local/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/opt/local/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/opt/local/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/opt/local/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/opt/local/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/opt/local/avr/include/util/delay.h **** 
 137:/opt/local/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/opt/local/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/opt/local/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/opt/local/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/opt/local/avr/include/util/delay.h **** 
 142:/opt/local/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/opt/local/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/opt/local/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/opt/local/avr/include/util/delay.h ****    microseconds of delay.
 146:/opt/local/avr/include/util/delay.h **** 
 147:/opt/local/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/opt/local/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/opt/local/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/opt/local/avr/include/util/delay.h ****    respectively.
 151:/opt/local/avr/include/util/delay.h **** 
 152:/opt/local/avr/include/util/delay.h ****    \note
 153:/opt/local/avr/include/util/delay.h **** 
 154:/opt/local/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/opt/local/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/opt/local/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/opt/local/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/opt/local/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/opt/local/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/opt/local/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/opt/local/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/opt/local/avr/include/util/delay.h ****    not available to the compiler then.
 163:/opt/local/avr/include/util/delay.h **** 
 164:/opt/local/avr/include/util/delay.h ****  */
 165:/opt/local/avr/include/util/delay.h **** void
 166:/opt/local/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/opt/local/avr/include/util/delay.h **** {
 168:/opt/local/avr/include/util/delay.h **** 	double __tmp ;
 169:/opt/local/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/opt/local/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/opt/local/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/opt/local/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/opt/local/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/opt/local/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/opt/local/avr/include/util/delay.h **** 
 176:/opt/local/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/opt/local/avr/include/util/delay.h **** 
 179:/opt/local/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/opt/local/avr/include/util/delay.h **** 
 182:/opt/local/avr/include/util/delay.h **** 	#else
 183:/opt/local/avr/include/util/delay.h **** 		//round up by default
 184:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/opt/local/avr/include/util/delay.h **** 	#endif
 186:/opt/local/avr/include/util/delay.h **** 
 187:/opt/local/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/opt/local/avr/include/util/delay.h **** 
 189:/opt/local/avr/include/util/delay.h **** #else
 190:/opt/local/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/opt/local/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/opt/local/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/opt/local/avr/include/util/delay.h **** 		__ticks = 1;
 194:/opt/local/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/opt/local/avr/include/util/delay.h **** 	{
 196:/opt/local/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/opt/local/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/opt/local/avr/include/util/delay.h **** 		while(__ticks)
 199:/opt/local/avr/include/util/delay.h **** 		{
 200:/opt/local/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/opt/local/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/opt/local/avr/include/util/delay.h **** 			__ticks --;
 203:/opt/local/avr/include/util/delay.h **** 		}
 204:/opt/local/avr/include/util/delay.h **** 		return;
 205:/opt/local/avr/include/util/delay.h **** 	}
 206:/opt/local/avr/include/util/delay.h **** 	else
 207:/opt/local/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/opt/local/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/opt/local/avr/include/util/delay.h **** #endif
 210:/opt/local/avr/include/util/delay.h **** }
 211:/opt/local/avr/include/util/delay.h **** 
 212:/opt/local/avr/include/util/delay.h **** /**
 213:/opt/local/avr/include/util/delay.h ****    \ingroup util_delay
 214:/opt/local/avr/include/util/delay.h **** 
 215:/opt/local/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/opt/local/avr/include/util/delay.h **** 
 217:/opt/local/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/opt/local/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/opt/local/avr/include/util/delay.h **** 
 220:/opt/local/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/opt/local/avr/include/util/delay.h **** 
 222:/opt/local/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/opt/local/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/opt/local/avr/include/util/delay.h ****    will not be informed about this case.
 225:/opt/local/avr/include/util/delay.h **** 
 226:/opt/local/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/opt/local/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/opt/local/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/opt/local/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/opt/local/avr/include/util/delay.h **** 
 231:/opt/local/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/opt/local/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/opt/local/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/opt/local/avr/include/util/delay.h ****    microseconds of delay.
 235:/opt/local/avr/include/util/delay.h **** 
 236:/opt/local/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/opt/local/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/opt/local/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/opt/local/avr/include/util/delay.h ****    respectively.
 240:/opt/local/avr/include/util/delay.h **** 
 241:/opt/local/avr/include/util/delay.h ****    \note
 242:/opt/local/avr/include/util/delay.h **** 
 243:/opt/local/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/opt/local/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/opt/local/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/opt/local/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/opt/local/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/opt/local/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/opt/local/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/opt/local/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/opt/local/avr/include/util/delay.h ****    not available to the compiler then.
 252:/opt/local/avr/include/util/delay.h **** 
 253:/opt/local/avr/include/util/delay.h ****  */
 254:/opt/local/avr/include/util/delay.h **** void
 255:/opt/local/avr/include/util/delay.h **** _delay_us(double __us)
 256:/opt/local/avr/include/util/delay.h **** {
 257:/opt/local/avr/include/util/delay.h **** 	double __tmp ;
 258:/opt/local/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/opt/local/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/opt/local/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/opt/local/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/opt/local/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/opt/local/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/opt/local/avr/include/util/delay.h **** 
 265:/opt/local/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/opt/local/avr/include/util/delay.h **** 
 268:/opt/local/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/opt/local/avr/include/util/delay.h **** 
 271:/opt/local/avr/include/util/delay.h **** 	#else
 272:/opt/local/avr/include/util/delay.h **** 		//round up by default
 273:/opt/local/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/opt/local/avr/include/util/delay.h **** 	#endif
 275:/opt/local/avr/include/util/delay.h **** 
 276:/opt/local/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  89               		.loc 2 276 0
  90 0004 85E0      		ldi r24,lo8(5)
  91 0006 8A95      	1:	dec r24
  92 0008 01F4      		brne 1b
  93 000a 0000      		nop
  94               	.LVL1:
  95               	.LBE7:
  96               	.LBE6:
  45:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     _delay_us(1);
  46:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     return PS2_CLOCK_PIN&(1<<PS2_CLOCK_BIT);
  97               		.loc 1 46 0
  98 000c 89B1      		in r24,0x9
  47:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
  99               		.loc 1 47 0
 100 000e 8695      		lsr r24
 101 0010 8170      		andi r24,1
 102               	/* epilogue start */
 103 0012 0895      		ret
 104               		.cfi_endproc
 105               	.LFE9:
 107               		.section	.text.data_init,"ax",@progbits
 108               	.global	data_init
 110               	data_init:
 111               	.LFB15:
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117               	/* epilogue start */
 118 0000 0895      		ret
 119               		.cfi_endproc
 120               	.LFE15:
 122               		.section	.text.data_lo,"ax",@progbits
 123               	.global	data_lo
 125               	data_lo:
 126               	.LFB11:
  48:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  49:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** /*
  50:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****  * Data
  51:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****  */
  52:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void data_init(void)
  53:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
  54:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
  55:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  56:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void data_lo(void)
  57:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
 127               		.loc 1 57 0
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
  58:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT &= ~(1<<PS2_DATA_BIT);
 133               		.loc 1 58 0
 134 0000 5898      		cbi 0xb,0
  59:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  |=  (1<<PS2_DATA_BIT);
 135               		.loc 1 59 0
 136 0002 509A      		sbi 0xa,0
 137               	/* epilogue start */
  60:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
 138               		.loc 1 60 0
 139 0004 0895      		ret
 140               		.cfi_endproc
 141               	.LFE11:
 143               		.section	.text.data_hi,"ax",@progbits
 144               	.global	data_hi
 146               	data_hi:
 147               	.LFB12:
  61:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  62:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** void data_hi(void)
  63:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
 148               		.loc 1 63 0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  64:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     /* input with pull up */
  65:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
 154               		.loc 1 65 0
 155 0000 5098      		cbi 0xa,0
  66:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
 156               		.loc 1 66 0
 157 0002 589A      		sbi 0xb,0
 158               	/* epilogue start */
  67:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
 159               		.loc 1 67 0
 160 0004 0895      		ret
 161               		.cfi_endproc
 162               	.LFE12:
 164               		.section	.text.data_in,"ax",@progbits
 165               	.global	data_in
 167               	data_in:
 168               	.LFB13:
  68:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** 
  69:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** bool data_in(void)
  70:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** {
 169               		.loc 1 70 0
 170               		.cfi_startproc
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 0 */
 174               	.L__stack_usage = 0
  71:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
 175               		.loc 1 71 0
 176 0000 5098      		cbi 0xa,0
  72:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
 177               		.loc 1 72 0
 178 0002 589A      		sbi 0xb,0
 179               	.LVL2:
 180               	.LBB8:
 181               	.LBB9:
 182               		.loc 2 276 0
 183 0004 85E0      		ldi r24,lo8(5)
 184 0006 8A95      	1:	dec r24
 185 0008 01F4      		brne 1b
 186 000a 0000      		nop
 187               	.LVL3:
 188               	.LBE9:
 189               	.LBE8:
  73:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     _delay_us(1);
  74:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c ****     return PS2_DATA_PIN&(1<<PS2_DATA_BIT);
 190               		.loc 1 74 0
 191 000c 89B1      		in r24,0x9
  75:/users/hunter/downloads/tmk_core/protocol/ps2_io_avr.c **** }
 192               		.loc 1 75 0
 193 000e 8170      		andi r24,lo8(1)
 194               	/* epilogue start */
 195 0010 0895      		ret
 196               		.cfi_endproc
 197               	.LFE13:
 199               		.text
 200               	.Letext0:
 201               		.file 3 "/opt/local/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ps2_io_avr.c
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:4      *ABS*:000000000000003f __SREG__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:13     .text.clock_init:0000000000000000 clock_init
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:31     .text.clock_lo:0000000000000000 clock_lo
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:52     .text.clock_hi:0000000000000000 clock_hi
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:73     .text.clock_in:0000000000000000 clock_in
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:110    .text.data_init:0000000000000000 data_init
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:125    .text.data_lo:0000000000000000 data_lo
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:146    .text.data_hi:0000000000000000 data_hi
/var/folders/qj/kb_cqn1j20vbbrqdphlhjt3c0000gn/T//ccJRWThP.s:167    .text.data_in:0000000000000000 data_in

NO UNDEFINED SYMBOLS
